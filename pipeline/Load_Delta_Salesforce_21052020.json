{
	"name": "Load_Delta_Salesforce_21052020",
	"properties": {
		"activities": [
			{
				"name": "GET CFG",
				"description": "First, we have to get configuration. We will use Lookup activity to retrieve it from the database.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT * from @{pipeline().parameters.ConfigTable} WHERE Enabled = 1\nIF @@ROWCOUNT = 0 THROW 50000,'No rows in configuration table!',1",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "IsdwStagePBI",
						"type": "DatasetReference",
						"parameters": {
							"TableName": "It’s just dummy value"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "SFC CFG",
				"description": "Now we have to split configs for each Data source. We will use Filter activity on rows retrieved in “GET CFG” lookup.",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "GET CFG",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GET CFG').output.value",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().SRC_name,'SFC')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "FOR EACH SFC",
				"description": "Now it’s time to iterate over each row filtered in separate containers for each data source",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "SFC CFG",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('SFC CFG').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "GET MAX SFC",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SalesforceServiceCloudSource",
									"query": {
										"value": "SELECT MAX(@{item().WatermarkColumn}) as maxd FROM @{item().SRC_tab} ",
										"type": "Expression"
									},
									"readBehavior": "query"
								},
								"dataset": {
									"referenceName": "SFC",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "COPY SFC",
							"description": "Now the most important part :> Copy activity with a lot of parameterized things",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "GET MAX SFC",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SalesforceServiceCloudSource",
									"query": {
										"value": "SELECT @{item().Cols} FROM @{item().SRC_tab}",
										"type": "Expression"
									},
									"readBehavior": "query"
								},
								"sink": {
									"type": "AzureSqlSink",
									"writeBatchSize": 10000,
									"preCopyScript": {
										"value": "if exists (select * from dbo.sysobjects \nwhere \nOBJECTPROPERTY(id, N'IsUserTable') = 1 AND \nname = REPLACE(REPLACE('@{item().DSTSchemaTable}','[','') ,']','') \n)\n\nTRUNCATE TABLE @{item().DSTSchemaTable}",
										"type": "Expression"
									},
									"tableOption": "autoCreate",
									"disableMetricsCollection": false
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "SFC",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "IsdwStagePBI",
									"type": "DatasetReference",
									"parameters": {
										"TableName": {
											"value": "@{item().DST_schema}.@{item().DST_tab}",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "UPDATE WATERMARK SFC",
							"description": "Now we have to confirm, that load has finished and then update previous watermark value with the new one.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "COPY SFC",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[Load].[usp_UpdateWatermark]",
								"storedProcedureParameters": {
									"CopyDuration": {
										"value": {
											"value": "@{activity('Copy SFC').output.copyDuration}",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"id": {
										"value": {
											"value": "@{item().id}\n",
											"type": "Expression"
										},
										"type": "Int16"
									},
									"LastDataRefresh": {
										"value": {
											"value": "@{utcnow()}",
											"type": "Expression"
										},
										"type": "Datetimeoffset"
									},
									"NewWatermark": {
										"value": {
											"value": "@{activity('GET MAX SFC').output.firstRow.MAXD}",
											"type": "Expression"
										},
										"type": "Datetimeoffset"
									},
									"RowsCopied": {
										"value": {
											"value": "@{activity('Copy SFC').output.rowsCopied}",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"RowsRead": {
										"value": {
											"value": "@{activity('Copy SFC').output.rowsRead}",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "IsdwstagePBI",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Copy Pipeline Activity",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "COPY SFC",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{pipeline().RunId}' as RunId,\n'@{item().SRC_tab}' as Source,\n'@{item().DST_tab}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@trigger().scheduledTime' as ScheduleTiggerTime,\n'@trigger().startTime' as ScheduleTriggerStartTime,\n'@trigger().outputs.windowStartTime' as TumblingWindowTriggerStartTime,\n'@trigger().outputs.windowEndTime' as TumblingWindowTriggerEndTime,\n'@{activity('Copy SFC').output.rowsCopied}' as RowsCopied,\n'@{activity('Copy SFC').output.rowsRead}' as RowsRead,\n'@{activity('Copy SFC').output.usedParallelCopies}' as No_ParallelCopies,\n'@{activity('Copy SFC').output.copyDuration}' as CopyDuration_in_secs,\n'@{activity('Copy SFC').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n'@{activity('Copy SFC').output.executionDetails[0].source.type}' as Source_Type,\n'@{activity('Copy SFC').output.executionDetails[0].sink.type}' as Sink_Type,\n'@{activity('Copy SFC').output.executionDetails[0].status}' as Execution_Status,\n'@{activity('Copy SFC').output.executionDetails[0].start}' as CopyActivity_Start_Time,\n'@{utcnow()}' as CopyActivity_End_Time,\n'@{activity('Copy SFC').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_queuingDuration_in_secs,\n'@{activity('Copy SFC').output.executionDetails[0].detailedDurations.timeToFirstByte}' as CopyActivity_timeToFirstByte_in_secs,\n'@{activity('Copy SFC').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_transferDuration_in_secs",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00"
								},
								"sink": {
									"type": "AzureSqlSink",
									"disableMetricsCollection": false
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "IsdwStagePBI",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "It’s just dummy value"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "IsdwStagePBI",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "AzurePipeline_log"
									}
								}
							]
						},
						{
							"name": "Copy Pipeline Activity Errors for Get Max SFC",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "GET MAX SFC",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{pipeline().RunId}' as RunId,\n'@{item().SRC_tab}' as Source,\n'@{item().DST_tab}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@trigger().scheduledTime' as ScheduleTiggerTime,\n'@trigger().startTime' as ScheduleTriggerStartTime,\n'@trigger().outputs.windowStartTime' as TumblingWindowTriggerStartTime,\n'@trigger().outputs.windowEndTime' as TumblingWindowTriggerEndTime,\n'Failed' as Execution_Status",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00"
								},
								"sink": {
									"type": "AzureSqlSink",
									"tableOption": "autoCreate",
									"disableMetricsCollection": false
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "IsdwStagePBI",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "It’s just dummy value"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "IsdwStagePBI",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "AzurePipeline_log"
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "Set Enabled Flag to 0 for Tables with no data",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "FOR EACH SFC",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[Load].[usp_EnabledAzurePipelineConfiguration]"
				},
				"linkedServiceName": {
					"referenceName": "IsdwstagePBI",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Store Row Count of all tables",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "FOR EACH SFC",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[Load].[usp_GetTableRowCount]",
					"storedProcedureParameters": {
						"RunId": {
							"value": {
								"value": "@{pipeline().RunId}",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "IsdwstagePBI",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"ConfigTable": {
				"type": "string",
				"defaultValue": "load.AzurePipelineConfiguration"
			}
		},
		"folder": {
			"name": "Logan Pipe Salesforce"
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}